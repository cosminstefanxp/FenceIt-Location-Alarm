//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.fenceit.ui;

import android.R.id;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import com.actionbarsherlock.view.MenuItem;
import com.fenceit.ui.helpers.LocationMapSearchTask;
import com.fenceit.ui.helpers.LocationMapSearchTask_;
import com.googlecode.androidannotations.api.SdkVersionHelper;

public final class CoordinatesMapActivity_
    extends CoordinatesMapActivity
{


    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
    }

    private void init_(Bundle savedInstanceState) {
        CoordinatesMapActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((CoordinatesMapActivity_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance!= null) {
            searchTask = nonConfigurationInstance.searchTask;
            ((LocationMapSearchTask_) searchTask).rebind(this);
        }
        if (searchTask == null) {
            searchTask = LocationMapSearchTask_.getInstance_(this);
        }
    }

    private void afterSetContentView_() {
        ((LocationMapSearchTask_) searchTask).afterSetContentView_();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        afterSetContentView_();
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    public static CoordinatesMapActivity_.IntentBuilder_ intent(Context context) {
        return new CoordinatesMapActivity_.IntentBuilder_(context);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        boolean handled = super.onOptionsItemSelected(item);
        if (handled) {
            return true;
        }
        int itemId_ = item.getItemId();
        if (itemId_ == id.home) {
            homeSelected();
            return true;
        }
        return false;
    }

    @Override
    public Object getLastCustomNonConfigurationInstance() {
        CoordinatesMapActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((CoordinatesMapActivity_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance == null) {
            return null;
        }
        return nonConfigurationInstance.superNonConfigurationInstance;
    }

    @Override
    public CoordinatesMapActivity_.NonConfigurationInstancesHolder onRetainCustomNonConfigurationInstance() {
        return new CoordinatesMapActivity_.NonConfigurationInstancesHolder(super.onRetainCustomNonConfigurationInstance(), searchTask);
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, CoordinatesMapActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public CoordinatesMapActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (context_ instanceof Activity) {
                ((Activity) context_).startActivityForResult(intent_, requestCode);
            } else {
                context_.startActivity(intent_);
            }
        }

    }

    private static class NonConfigurationInstancesHolder {

        public final Object superNonConfigurationInstance;
        public final LocationMapSearchTask searchTask;

        public NonConfigurationInstancesHolder(Object superNonConfigurationInstance, LocationMapSearchTask searchTask) {
            this.superNonConfigurationInstance = superNonConfigurationInstance;
            this.searchTask = searchTask;
        }

    }

}
